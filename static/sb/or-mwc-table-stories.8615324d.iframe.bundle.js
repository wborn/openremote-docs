"use strict";(self.webpackChunk_openremote_workshop=self.webpackChunk_openremote_workshop||[]).push([[3723],{"./stories/util/util.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function getMarkdownString(file){return file.toString()}function splitLines(value){var amount=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,strArray=value.split("\n");return strArray.splice(0,amount),strArray.join("\n")}__webpack_require__.d(__webpack_exports__,{B:()=>getMarkdownString,u:()=>splitLines})},"./stories/or-mwc-table.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var wc_storybook_helpers__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../../node_modules/wc-storybook-helpers/index.js"),_util_util__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__("../../component/or-mwc-components/lib/or-mwc-table.js"),__webpack_require__("./stories/util/util.ts")),_temp_or_mwc_components_README_md__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/temp/or-mwc-components-README.md"),_getWcStorybookHelper=(0,wc_storybook_helpers__WEBPACK_IMPORTED_MODULE_0__.M)("or-mwc-table"),events=_getWcStorybookHelper.events,args=_getWcStorybookHelper.args,argTypes=_getWcStorybookHelper.argTypes,template=_getWcStorybookHelper.template;console.log(argTypes);var meta={title:"Components/or-mwc-table",component:"or-mwc-table",args,argTypes,parameters:{actions:{handles:events}}},Primary={args:{columns:[{title:"Column 1"},{title:"Column 2"},{title:"Column 3"}],rows:[{content:["Row 1, Column 1","Row 1, Column 2","Row 1, Column 3"]},{content:["Row 2, Column 1","Row 2, Column 2","Row 2, Column 3"]}]},parameters:{docs:{readmeStr:(0,_util_util__WEBPACK_IMPORTED_MODULE_3__.u)((0,_util_util__WEBPACK_IMPORTED_MODULE_3__.B)(_temp_or_mwc_components_README_md__WEBPACK_IMPORTED_MODULE_2__),1),source:{code:'\nimport {TableColumn, TableRow} from "@openremote/or-mwc-components/or-mwc-table";\nimport "@openremote/or-mwc-components/or-mwc-table"; // this is necessary\n\n// Set up table columns\nconst columns: TableColumn[] = [{title: "Column 1"}, {title: "Column 2"}, {title: "Column 3"}];\n\n// Set up table rows\nconst rows: TableRow[] = [\n    {content: ["Row 1, Column 1", "Row 1, Column 2", "Row 1, Column 3"]},\n    {content: ["Row 2, Column 1", "Row 2, Column 2", "Row 2, Column 3"]}\n];\n\n// (IF NOT USING LIT; you should parse the objects to JSON strings)\n// const columnsStr = JSON.stringify(columns);\n// const rowsStr = JSON.stringify(rows);\n\n// in your HTML code use this, and inject them;\n<or-mwc-table columns="columns" rows="rows"></or-mwc-table>\n'},story:{height:"240px"}}},render:function render(args){return template(args)}};const __WEBPACK_DEFAULT_EXPORT__=meta;Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:'{\n  args: {\n    columns: [{\n      title: "Column 1"\n    }, {\n      title: "Column 2"\n    }, {\n      title: "Column 3"\n    }],\n    rows: [{\n      content: ["Row 1, Column 1", "Row 1, Column 2", "Row 1, Column 3"]\n    }, {\n      content: ["Row 2, Column 1", "Row 2, Column 2", "Row 2, Column 3"]\n    }]\n  },\n  parameters: {\n    docs: {\n      readmeStr: splitLines(getMarkdownString(ReadMe), 1),\n      source: {\n        code: getExampleCode()\n      },\n      story: {\n        height: \'240px\'\n      }\n    }\n  },\n  render: args => template(args)\n}',...Primary.parameters?.docs?.source}}};const __namedExportsOrder=["Primary"]},"./stories/temp/or-mwc-components-README.md":module=>{module.exports="# @openremote/or-mwc-* \\<or-mwc-*\\>\n[![NPM Version][npm-image]][npm-url]\n[![Linux Build][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\nWeb components wrapper for `MDC` web UI components, the standard `MWC` components are not complete, and they have a\nhorrible icon font dependency (hopefully this will removed) whereas we use `SVG` based icon sets.\n\n## Install\n```bash\nnpm i @openremote/or-mwc-components\nyarn add @openremote/or-mwc-components\n```\n\n## Usage\nFor a full list of properties, methods and options refer to the TypeDoc generated [documentation]().\n\n\n## Supported Browsers\nThe last 2 versions of all modern browsers are supported, including Chrome, Safari, Opera, Firefox, Edge. In addition,\nInternet Explorer 11 is also supported.\n\n\n## License\n[GNU AGPL](https://www.gnu.org/licenses/agpl-3.0.en.html)\n\n[npm-image]: https://img.shields.io/npm/v/live-xxx.svg\n[npm-url]: https://npmjs.org/package/@openremote/or-mwc-components\n[travis-image]: https://img.shields.io/travis/live-js/live-xxx/master.svg\n[travis-url]: https://travis-ci.org/live-js/live-xxx\n[coveralls-image]: https://img.shields.io/coveralls/live-js/live-xxx/master.svg\n[coveralls-url]: https://coveralls.io/r/live-js/live-xxx?branch=master\n"}}]);